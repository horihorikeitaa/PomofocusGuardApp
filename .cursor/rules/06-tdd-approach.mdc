---
description: 
globs: 
alwaysApply: false
---
# テスト駆動開発（TDD）アプローチ

## TDDの基本サイクル
- Red: 失敗するテストを最初に書く
- Green: テストが通るように最小限の実装をする
- Refactor: コードをクリーンに保つ

## テスト対象の優先順位
1. **ドメインエンティティ**: 全機能の中核となるドメインモデル
2. **ユースケース**: ビジネスロジックと状態遷移
3. **カスタムフック**: プレゼンテーションロジック
4. **UI/コンポーネント**: ユーザーインターフェース部分

## テスト命名規則
- クラス/モジュール名: `describe('クラス名', () => {});`
- 機能/メソッド: `describe('#メソッド名', () => {});`
- 期待動作: `it('〜すべき', () => {});`

## テストディレクトリ構造
```
__tests__/             # ルートテストディレクトリ
├── __fixtures__/      # テストデータ
└── 実装と同じ構造で配置    # 例: features/timer/domain/
```

## 外部依存のモック化
- インターフェースを介してすべての外部依存を使用する
- テスト時にはモックに置き換える
- プラットフォーム固有機能は抽象化レイヤーを通してアクセス

## カバレッジ目標
- ドメインロジック: 90%以上
- プレゼンテーション層: 70%以上
- UI層: 主要コンポーネントのみ

詳細な方針は[TDDアプローチ](mdc:docs/tdd-approach.md)を参照
