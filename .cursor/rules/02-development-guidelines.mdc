---
description: 
globs: 
alwaysApply: false
---
# 開発規約

## アーキテクチャパターン
- 機能ベースのクリーンアーキテクチャ + Reactiveパターン
- ドメインロジックの独立性を維持
- カスタムフックによるViewModel実装
- 詳細は[architecture.md](mdc:docs/architecture.md)を参照

## コード構造
- 機能ごとにディレクトリを分割（timer, restrictions, posture）
- 各機能は以下のレイヤーで構成
  - domain: ドメインモデルとビジネスロジック
  - data: リポジトリ実装とデータアクセス
  - hooks: プレゼンテーションロジック
  - components: UIコンポーネント
  - screens: 画面

## 命名規則
- TypeScriptのインターフェースとクラス: PascalCase (例: `TimerService`)
- コンポーネント: PascalCase (例: `TimerDisplay.tsx`)
- カスタムフック: camelCase + use接頭辞 (例: `useTimer()`)
- 関数: camelCase (例: `startTimer()`)
- 定数: UPPER_SNAKE_CASE (例: `DEFAULT_TIMER_DURATION`)
- ファイル名: コンポーネントはPascalCase、それ以外はcamelCase
- ドメインモデル: PascalCase (例: `Session.ts`)

## 状態管理
- Recoilを使用した状態管理
- アトムはシンプルに保つ
- セレクタを活用して派生データを計算
- パフォーマンス最適化のためにメモ化を活用

## コーディングスタイル
- ESLintとPrettierを使用
- デフォルトのエクスポートより名前付きエクスポートを優先
- コンポーネントはなるべく小さく保つ
- 不要なコメントより自己説明的なコードを書く

## テスト駆動開発（TDD）
- **TDDサイクル**: Red（失敗するテストを書く）→ Green（テストが通るように実装）→ Refactor（改善）
- **対象範囲**: 全てのドメインロジックとユースケースはTDDで開発
- **テストディレクトリ構造**: 実装コードと同じ構造を`__tests__`以下に作成
- **テストの種類**:
  - 単体テスト: すべてのドメインエンティティとユースケース
  - 統合テスト: 複数のユースケースやサービスの連携
  - UIテスト: 主要なユーザーフロー
- **テスト命名規則**: `describe`と`it`を使った明確な仕様記述
  - 例: `describe('TimerSession', () => { it('初期化時に正しい状態になること', () => {...}); });`
- **モック戦略**: 外部依存（センサー、ストレージなど）はモックを使用
- **カバレッジ目標**: ドメインロジックとユースケースは90%以上、UIは70%以上

## CI/CDパイプライン
- プルリクエスト時に全テストを実行
- マージ前にコードレビューとテストパスを必須にする
- テストパスと静的解析の通過をデプロイの前提条件とする
