---
description: 
globs: 
alwaysApply: false
---
# プロジェクト構造

```
PomofocusGuardApp/
├── src/                      # ソースコード
│   ├── core/                 # コアドメインロジック
│   │   ├── entities/         # ドメインエンティティ
│   │   └── interfaces/       # リポジトリやサービスのインターフェース
│   │
│   ├── features/             # 機能モジュール
│   │   ├── timer/            # タイマー機能
│   │   │   ├── domain/       # タイマードメインロジック
│   │   │   ├── data/         # データ層
│   │   │   ├── hooks/        # ビジネスロジック
│   │   │   ├── components/   # UIコンポーネント
│   │   │   └── screens/      # 画面
│   │   │
│   │   ├── restrictions/     # アプリ・サイト制限機能
│   │   │   ├── domain/       # 制限機能ドメインロジック
│   │   │   ├── data/         # データ層
│   │   │   ├── hooks/        # ビジネスロジック
│   │   │   ├── components/   # UIコンポーネント
│   │   │   └── native/       # ネイティブモジュール連携
│   │   │
│   │   └── posture/          # 姿勢検知機能
│   │       ├── domain/       # 姿勢検知ドメインロジック
│   │       ├── data/         # データ層
│   │       ├── hooks/        # ビジネスロジック
│   │       ├── components/   # UIコンポーネント
│   │       └── sensors/      # センサー連携
│   │
│   ├── shared/               # 共有コンポーネントとユーティリティ
│   │   ├── components/       # 共通UIコンポーネント
│   │   ├── hooks/            # 共通カスタムフック
│   │   ├── utils/            # ユーティリティ関数
│   │   ├── constants/        # 定数定義
│   │   └── theme/            # テーマ定義
│   │
│   ├── services/             # アプリ全体のサービス
│   │   ├── navigation/       # ナビゲーション
│   │   ├── storage/          # ストレージサービス
│   │   └── notification/     # 通知サービス
│   │
│   ├── di/                   # 依存性注入設定
│   │   └── container.tsx     # サービスプロバイダー
│   │
│   ├── App.tsx               # アプリのルートコンポーネント
│   └── index.js              # エントリーポイント
│
├── docs/                     # ドキュメント
│   ├── requirements.md       # 要件定義書
│   └── architecture.md       # アーキテクチャ設計書
│
├── .cursor/                  # Cursorルール
├── __tests__/                # テスト
├── android/                  # Androidネイティブコード
├── ios/                      # iOSネイティブコード
└── README.md                 # プロジェクト概要
```

## 主要ディレクトリの役割

- `core`: コアとなるドメインロジック、エンティティ、インターフェース
- `features`: 機能モジュール（タイマー、制限機能、姿勢検知）
- `shared`: 共通のコンポーネントとユーティリティ
- `services`: アプリ全体で使用するサービス
- `di`: 依存性注入の設定

## レイヤー構造

各機能モジュールは以下の4つのレイヤーで構成されます：

1. **ドメインレイヤー**: ビジネスロジックと純粋なドメインモデル
2. **データレイヤー**: リポジトリの実装とデータアクセス
3. **プレゼンテーションレイヤー**: カスタムフック（ViewModel的役割）
4. **UIレイヤー**: Reactコンポーネントと画面

## ベストプラクティス

- 関連するコードは機能モジュール内に集約する
- 共通のユーティリティやコンポーネントは`shared`ディレクトリに配置
- ドメインロジックは外部依存から独立させる
- プラットフォーム固有のコードは抽象化する
